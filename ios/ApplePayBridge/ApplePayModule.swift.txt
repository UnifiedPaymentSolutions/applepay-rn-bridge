import Foundation
import PassKit
import React

@objc(ApplePayModule)
class ApplePayModule: RCTEventEmitter, PKPaymentAuthorizationControllerDelegate {
    
    // MARK: - Properties
    var session: PKPaymentAuthorizationController?
    var hasListeners = false
    var paymentData: [String: Any] = [:]
    
    // MARK: - React Native Required
    @objc override static func requiresMainQueueSetup() -> Bool {
        return true
    }

    override func supportedEvents() -> [String] {
        return ["onPaymentSuccess", "onPaymentFailed"]
    }

    override func startObserving() {
        hasListeners = true
    }

    override func stopObserving() {
        hasListeners = false
    }

    // MARK: - Apple Pay Availability Check
    
    @objc func canMakePayments(_ resolve: @escaping RCTPromiseResolveBlock,
                               rejecter reject: @escaping RCTPromiseRejectBlock) {
        let canPay = PKPaymentAuthorizationController.canMakePayments(usingNetworks: [.visa, .masterCard])
        resolve(canPay)
    }
    
    // MARK: - Fetch Link Data
    
    func getLinkData(paymentDetailUrl: String, paymentReference: String, accessToken: String, completion: @escaping ([String: Any]?, Error?) -> Void) {
        guard var urlComponents = URLComponents(string: paymentDetailUrl) else {
            completion(nil, NSError(domain: "ApplePay", code: 400, userInfo: [NSLocalizedDescriptionKey: "Invalid payment detail URL"]))
            return
        }
        
        // Add payment reference as query param
        urlComponents.queryItems = [URLQueryItem(name: "payment_reference", value: paymentReference)]
        
        guard let url = urlComponents.url else {
            completion(nil, NSError(domain: "ApplePay", code: 400, userInfo: [NSLocalizedDescriptionKey: "Failed to construct URL"]))
            return
        }
        
        var request = URLRequest(url: url)
        request.httpMethod = "GET"
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")
        request.setValue("Bearer \(accessToken)", forHTTPHeaderField: "Authorization")
        
        URLSession.shared.dataTask(with: request) { data, response, error in
            if let error = error {
                completion(nil, error)
                return
            }
            
            guard let data = data else {
                completion(nil, NSError(domain: "ApplePay", code: 404, userInfo: [NSLocalizedDescriptionKey: "No data received"]))
                return
            }
            
            do {
                guard let json = try JSONSerialization.jsonObject(with: data) as? [String: Any] else {
                    completion(nil, NSError(domain: "ApplePay", code: 422, userInfo: [NSLocalizedDescriptionKey: "Invalid JSON response"]))
                    return
                }
                completion(json, nil)
            } catch {
                completion(nil, error)
            }
        }.resume()
    }
    
    // MARK: - Start Apple Pay Session
    
    @objc func startPayment(_ config: NSDictionary) {
        guard
            let paymentReference = config["paymentReference"] as? String,
            let amountString = config["amount"] as? String,
            let label = config["label"] as? String,
            let merchantId = config["merchantId"] as? String,
            let countryCode = config["countryCode"] as? String,
            let currencyCode = config["currencyCode"] as? String,
            let paymentSessionUrl = config["paymentSessionUrl"] as? String,
            let authorizePaymentUrl = config["authorizePaymentUrl"] as? String,
            let paymentDetailUrl = config["paymentDetailUrl"] as? String,
            let accessToken = config["accessToken"] as? String
        else {
            if hasListeners {
                sendEvent(withName: "onPaymentFailed", body: ["error": "Missing payment configuration"])
            }
            return
        }

        // Store important details for reuse in delegate methods
        self.paymentData = [
            "paymentReference": paymentReference,
            "paymentSessionUrl": paymentSessionUrl,
            "authorizePaymentUrl": authorizePaymentUrl,
            "accessToken": accessToken
        ]
        
        // First, fetch link data to check for recurring payment configuration
        getLinkData(
            paymentDetailUrl: paymentDetailUrl,
            paymentReference: paymentReference,
            accessToken: accessToken
        ) { [weak self] linkData, error in
            guard let self = self else { return }
            
            if let error = error {
                if self.hasListeners {
                    self.sendEvent(withName: "onPaymentFailed", body: ["error": "Failed to fetch payment details: \(error.localizedDescription)"])
                }
                return
            }
            
            guard let linkData = linkData else {
                if self.hasListeners {
                    self.sendEvent(withName: "onPaymentFailed", body: ["error": "Missing payment details data"])
                }
                return
            }
            
            // Configure payment request
            let paymentRequest = PKPaymentRequest()
            paymentRequest.merchantIdentifier = merchantId
            paymentRequest.supportedNetworks = [.visa, .masterCard]
            paymentRequest.merchantCapabilities = .threeDSecure
            paymentRequest.countryCode = countryCode
            paymentRequest.currencyCode = currencyCode
            paymentRequest.paymentSummaryItems = [
                PKPaymentSummaryItem(label: label, amount: NSDecimalNumber(string: amountString))
            ]
            
            // Add recurring payment if needed
            self.configureRecurringPayment(paymentRequest, linkData: linkData, amountString: amountString)
            
            // Create session & present sheet
            self.session = PKPaymentAuthorizationController(paymentRequest: paymentRequest)
            self.session?.delegate = self
            
            DispatchQueue.main.async {
                self.session?.present(completion: { presented in
                    if !presented {
                        if self.hasListeners {
                            self.sendEvent(withName: "onPaymentFailed", body: ["error": "Failed to present Apple Pay sheet"])
                        }
                    }
                })
            }
        }
    }
    
    // MARK: - Configure Recurring Payment Request
    
    func configureRecurringPayment(_ paymentRequest: PKPaymentRequest, linkData: [String: Any], amountString: String) {
        // Check if this should be a recurring payment
        if let arrangement = linkData["arrangement"] as? Bool,
           let tokenConsentAgreed = linkData["token_consent_agreed"] as? Bool,
           let shopAttributes = linkData["shop_attributes"] as? [String: Any],
           let descriptorName = shopAttributes["descriptor_name"] as? String,
           let websiteAddress = shopAttributes["website_address"] as? String,
           arrangement == true && tokenConsentAgreed == true,
           let amount = NSDecimalNumber(string: amountString) as NSDecimalNumber?,
           Float(truncating: amount) >= 0.0 {

            if #available(iOS 16.0, *) {
                // iOS 16+ supports PKRecurringPaymentSummaryItem
                let regularBilling = PKRecurringPaymentSummaryItem(
                    label: "Recurring Payment",
                    amount: amount
                )

                if let websiteURL = URL(string: websiteAddress) {
                    paymentRequest.recurringPaymentRequest = PKRecurringPaymentRequest(
                        paymentDescription: descriptorName,
                        regularBilling: regularBilling,
                        managementURL: websiteURL
                    )
                }
            } else {
                // For earlier iOS versions, use basic approach (without recurring payment support)
                paymentRequest.paymentSummaryItems.append(
                    PKPaymentSummaryItem(label: "Save card for future payments", amount: NSDecimalNumber(string: "0.00"))
                )
            }
        }
    }

    // MARK: - Merchant Validation Request
    @objc
    func paymentAuthorizationController(_ controller: PKPaymentAuthorizationController,
                                        didRequestMerchantSessionUpdate handler: @escaping (PKPaymentRequestMerchantSessionUpdate) -> Void) {
        guard
            let paymentSessionUrl = self.paymentData["paymentSessionUrl"] as? String,
            let paymentReference = self.paymentData["paymentReference"] as? String,
            let accessToken = self.paymentData["accessToken"] as? String,
            let url = URL(string: paymentSessionUrl)
        else {
            handler(PKPaymentRequestMerchantSessionUpdate(status: .failure, merchantSession: nil))
            return
        }

        // Your backend validation request
        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")
        request.setValue("Bearer \(accessToken)", forHTTPHeaderField: "Authorization")
        
        // This matches the original JS implementation
        let payload: [String: Any] = [
            "payment_reference": paymentReference,
            "validation_url": ""
        ]
        
        request.httpBody = try? JSONSerialization.data(withJSONObject: payload)

        URLSession.shared.dataTask(with: request) { [weak self] data, response, error in
            guard let _ = self, error == nil, let data = data else {
                handler(PKPaymentRequestMerchantSessionUpdate(status: .failure, merchantSession: nil))
                return
            }
            do {
                // Deserialize JSON data
                if let jsonObj = try JSONSerialization.jsonObject(with: data) as? [String: Any] {
                    // Initialize merchant session
                    let merchantSession = PKPaymentMerchantSession(dictionary: jsonObj)
                    handler(PKPaymentRequestMerchantSessionUpdate(status: .success, merchantSession: merchantSession))
                } else {
                    handler(PKPaymentRequestMerchantSessionUpdate(status: .failure, merchantSession: nil))
                }
            } catch {
                handler(PKPaymentRequestMerchantSessionUpdate(status: .failure, merchantSession: nil))
            }
        }.resume()
    }

    // MARK: - Payment Authorization
    @objc
    func paymentAuthorizationController(_ controller: PKPaymentAuthorizationController,
                                        didAuthorizePayment payment: PKPayment,
                                        handler completion: @escaping (PKPaymentAuthorizationResult) -> Void) {

        guard
            let authorizeUrlStr = self.paymentData["authorizePaymentUrl"] as? String,
            let paymentReference = self.paymentData["paymentReference"] as? String,
            let accessToken = self.paymentData["accessToken"] as? String,
            let url = URL(string: authorizeUrlStr)
        else {
            completion(PKPaymentAuthorizationResult(status: .failure, errors: nil))
            if hasListeners {
                sendEvent(withName: "onPaymentFailed", body: ["error": "Missing payment configuration"])
            }
            return
        }

        // Process and send token to backend
        do {
            // Extract payment token data
            let tokenData = payment.token.paymentData
            let tokenJSON = try JSONSerialization.jsonObject(with: tokenData) as? [String: Any] ?? [:]
            
            // Prepare payload for backend - matches original JS implementation
            var payload: [String: Any] = [
                "payment_reference": paymentReference
            ]
            
            // Add token data to payload
            for (key, value) in tokenJSON {
                payload[key] = value
            }
            
            // Send to backend for processing
            var request = URLRequest(url: url)
            request.httpMethod = "POST"
            request.setValue("application/json", forHTTPHeaderField: "Content-Type")
            request.setValue("Bearer \(accessToken)", forHTTPHeaderField: "Authorization")
            request.httpBody = try JSONSerialization.data(withJSONObject: payload)
            
            URLSession.shared.dataTask(with: request) { [weak self] data, response, error in
                guard let self = self else {
                    completion(PKPaymentAuthorizationResult(status: .failure, errors: nil))
                    return
                }
                
                if error == nil {
                    // Success path
                    completion(PKPaymentAuthorizationResult(status: .success, errors: nil))
                    if self.hasListeners {
                        self.sendEvent(withName: "onPaymentSuccess", body: [:])
                    }
                } else {
                    // Error path
                    completion(PKPaymentAuthorizationResult(status: .failure, errors: nil))
                    if self.hasListeners {
                        self.sendEvent(withName: "onPaymentFailed", body: ["error": "Authorization failed: \(error?.localizedDescription ?? "Unknown error")"])
                    }
                }
            }.resume()
            
        } catch {
            // Handle JSON serialization errors
            completion(PKPaymentAuthorizationResult(status: .failure, errors: nil))
            if hasListeners {
                sendEvent(withName: "onPaymentFailed", body: ["error": "Failed to process payment data: \(error.localizedDescription)"])
            }
        }
    }

    // MARK: - Dismiss Payment Sheet
    func paymentAuthorizationControllerDidFinish(_ controller: PKPaymentAuthorizationController) {
        controller.dismiss {
            if self.hasListeners {
                self.sendEvent(withName: "onPaymentFailed", body: ["error": "User canceled payment"])
            }
        }
    }
    
    @available(iOS 15.0, *)
    func paymentAuthorizationController(_ controller: PKPaymentAuthorizationController,
                                        didChangeCouponCode couponCode: String,
                                        handler completion: @escaping (PKPaymentRequestCouponCodeUpdate) -> Void) {
        // Create a sample PKShippingMethod instance (you can modify this based on your logic)
        let shippingMethod = PKShippingMethod(label: "Standard Shipping", amount: NSDecimalNumber(string: "5.00"))
        
        // Create an array with the shipping method instance
        let shippingMethods = [shippingMethod]
        
        // Create the update object
        let update = PKPaymentRequestCouponCodeUpdate(errors: nil,
                                                       paymentSummaryItems: paymentData["paymentSummaryItems"] as? [PKPaymentSummaryItem] ?? [],
                                                       shippingMethods: shippingMethods)
        
        // Call the completion handler
        completion(update)
    }
    
    @objc
    func paymentAuthorizationController(_ controller: PKPaymentAuthorizationController, didSelectPaymentMethod paymentMethod: PKPaymentMethod, handler: @escaping (PKPaymentRequestPaymentMethodUpdate) -> Void) {
        handler(PKPaymentRequestPaymentMethodUpdate(paymentSummaryItems: []))
    }
    
    @objc
    func paymentAuthorizationController(_ controller: PKPaymentAuthorizationController,
                                        didSelectShippingContact contact: PKContact,
                                        handler: @escaping (PKPaymentRequestShippingContactUpdate) -> Void) {
        handler(PKPaymentRequestShippingContactUpdate(paymentSummaryItems: []))
    }
    
    @objc
    func paymentAuthorizationController(_ controller: PKPaymentAuthorizationController, didSelectShippingMethod shippingMethod: PKShippingMethod, handler: @escaping (PKPaymentRequestShippingMethodUpdate) -> Void) {
        handler(PKPaymentRequestShippingMethodUpdate(paymentSummaryItems: []))
    }
    
    #if os(macOS)
    func presentationWindow(for controller: PKPaymentAuthorizationController) -> NSWindow? {
        return nil
    }
    #endif
}
